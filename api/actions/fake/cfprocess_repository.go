// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/actions"
	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type CFProcessRepository struct {
	GetProcessStub        func(context.Context, authorization.Info, string) (repositories.ProcessRecord, error)
	getProcessMutex       sync.RWMutex
	getProcessArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}
	getProcessReturns struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	getProcessReturnsOnCall map[int]struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	ListProcessesStub        func(context.Context, authorization.Info, repositories.ListProcessesMessage) ([]repositories.ProcessRecord, error)
	listProcessesMutex       sync.RWMutex
	listProcessesArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListProcessesMessage
	}
	listProcessesReturns struct {
		result1 []repositories.ProcessRecord
		result2 error
	}
	listProcessesReturnsOnCall map[int]struct {
		result1 []repositories.ProcessRecord
		result2 error
	}
	ScaleProcessStub        func(context.Context, authorization.Info, repositories.ScaleProcessMessage) (repositories.ProcessRecord, error)
	scaleProcessMutex       sync.RWMutex
	scaleProcessArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ScaleProcessMessage
	}
	scaleProcessReturns struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	scaleProcessReturnsOnCall map[int]struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFProcessRepository) GetProcess(arg1 context.Context, arg2 authorization.Info, arg3 string) (repositories.ProcessRecord, error) {
	fake.getProcessMutex.Lock()
	ret, specificReturn := fake.getProcessReturnsOnCall[len(fake.getProcessArgsForCall)]
	fake.getProcessArgsForCall = append(fake.getProcessArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetProcessStub
	fakeReturns := fake.getProcessReturns
	fake.recordInvocation("GetProcess", []interface{}{arg1, arg2, arg3})
	fake.getProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFProcessRepository) GetProcessCallCount() int {
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	return len(fake.getProcessArgsForCall)
}

func (fake *CFProcessRepository) GetProcessCalls(stub func(context.Context, authorization.Info, string) (repositories.ProcessRecord, error)) {
	fake.getProcessMutex.Lock()
	defer fake.getProcessMutex.Unlock()
	fake.GetProcessStub = stub
}

func (fake *CFProcessRepository) GetProcessArgsForCall(i int) (context.Context, authorization.Info, string) {
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	argsForCall := fake.getProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFProcessRepository) GetProcessReturns(result1 repositories.ProcessRecord, result2 error) {
	fake.getProcessMutex.Lock()
	defer fake.getProcessMutex.Unlock()
	fake.GetProcessStub = nil
	fake.getProcessReturns = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) GetProcessReturnsOnCall(i int, result1 repositories.ProcessRecord, result2 error) {
	fake.getProcessMutex.Lock()
	defer fake.getProcessMutex.Unlock()
	fake.GetProcessStub = nil
	if fake.getProcessReturnsOnCall == nil {
		fake.getProcessReturnsOnCall = make(map[int]struct {
			result1 repositories.ProcessRecord
			result2 error
		})
	}
	fake.getProcessReturnsOnCall[i] = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) ListProcesses(arg1 context.Context, arg2 authorization.Info, arg3 repositories.ListProcessesMessage) ([]repositories.ProcessRecord, error) {
	fake.listProcessesMutex.Lock()
	ret, specificReturn := fake.listProcessesReturnsOnCall[len(fake.listProcessesArgsForCall)]
	fake.listProcessesArgsForCall = append(fake.listProcessesArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListProcessesMessage
	}{arg1, arg2, arg3})
	stub := fake.ListProcessesStub
	fakeReturns := fake.listProcessesReturns
	fake.recordInvocation("ListProcesses", []interface{}{arg1, arg2, arg3})
	fake.listProcessesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFProcessRepository) ListProcessesCallCount() int {
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	return len(fake.listProcessesArgsForCall)
}

func (fake *CFProcessRepository) ListProcessesCalls(stub func(context.Context, authorization.Info, repositories.ListProcessesMessage) ([]repositories.ProcessRecord, error)) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = stub
}

func (fake *CFProcessRepository) ListProcessesArgsForCall(i int) (context.Context, authorization.Info, repositories.ListProcessesMessage) {
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	argsForCall := fake.listProcessesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFProcessRepository) ListProcessesReturns(result1 []repositories.ProcessRecord, result2 error) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = nil
	fake.listProcessesReturns = struct {
		result1 []repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) ListProcessesReturnsOnCall(i int, result1 []repositories.ProcessRecord, result2 error) {
	fake.listProcessesMutex.Lock()
	defer fake.listProcessesMutex.Unlock()
	fake.ListProcessesStub = nil
	if fake.listProcessesReturnsOnCall == nil {
		fake.listProcessesReturnsOnCall = make(map[int]struct {
			result1 []repositories.ProcessRecord
			result2 error
		})
	}
	fake.listProcessesReturnsOnCall[i] = struct {
		result1 []repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) ScaleProcess(arg1 context.Context, arg2 authorization.Info, arg3 repositories.ScaleProcessMessage) (repositories.ProcessRecord, error) {
	fake.scaleProcessMutex.Lock()
	ret, specificReturn := fake.scaleProcessReturnsOnCall[len(fake.scaleProcessArgsForCall)]
	fake.scaleProcessArgsForCall = append(fake.scaleProcessArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ScaleProcessMessage
	}{arg1, arg2, arg3})
	stub := fake.ScaleProcessStub
	fakeReturns := fake.scaleProcessReturns
	fake.recordInvocation("ScaleProcess", []interface{}{arg1, arg2, arg3})
	fake.scaleProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFProcessRepository) ScaleProcessCallCount() int {
	fake.scaleProcessMutex.RLock()
	defer fake.scaleProcessMutex.RUnlock()
	return len(fake.scaleProcessArgsForCall)
}

func (fake *CFProcessRepository) ScaleProcessCalls(stub func(context.Context, authorization.Info, repositories.ScaleProcessMessage) (repositories.ProcessRecord, error)) {
	fake.scaleProcessMutex.Lock()
	defer fake.scaleProcessMutex.Unlock()
	fake.ScaleProcessStub = stub
}

func (fake *CFProcessRepository) ScaleProcessArgsForCall(i int) (context.Context, authorization.Info, repositories.ScaleProcessMessage) {
	fake.scaleProcessMutex.RLock()
	defer fake.scaleProcessMutex.RUnlock()
	argsForCall := fake.scaleProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFProcessRepository) ScaleProcessReturns(result1 repositories.ProcessRecord, result2 error) {
	fake.scaleProcessMutex.Lock()
	defer fake.scaleProcessMutex.Unlock()
	fake.ScaleProcessStub = nil
	fake.scaleProcessReturns = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) ScaleProcessReturnsOnCall(i int, result1 repositories.ProcessRecord, result2 error) {
	fake.scaleProcessMutex.Lock()
	defer fake.scaleProcessMutex.Unlock()
	fake.ScaleProcessStub = nil
	if fake.scaleProcessReturnsOnCall == nil {
		fake.scaleProcessReturnsOnCall = make(map[int]struct {
			result1 repositories.ProcessRecord
			result2 error
		})
	}
	fake.scaleProcessReturnsOnCall[i] = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *CFProcessRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessMutex.RLock()
	defer fake.getProcessMutex.RUnlock()
	fake.listProcessesMutex.RLock()
	defer fake.listProcessesMutex.RUnlock()
	fake.scaleProcessMutex.RLock()
	defer fake.scaleProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFProcessRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.CFProcessRepository = new(CFProcessRepository)
