// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/api/actions"
	"code.cloudfoundry.org/cf-k8s-controllers/api/authorization"
	"code.cloudfoundry.org/cf-k8s-controllers/api/repositories"
)

type CFRouteRepository struct {
	AddDestinationsToRouteStub        func(context.Context, authorization.Info, repositories.AddDestinationsToRouteMessage) (repositories.RouteRecord, error)
	addDestinationsToRouteMutex       sync.RWMutex
	addDestinationsToRouteArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.AddDestinationsToRouteMessage
	}
	addDestinationsToRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	addDestinationsToRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	FetchOrCreateRouteStub        func(context.Context, authorization.Info, repositories.CreateRouteMessage) (repositories.RouteRecord, error)
	fetchOrCreateRouteMutex       sync.RWMutex
	fetchOrCreateRouteArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateRouteMessage
	}
	fetchOrCreateRouteReturns struct {
		result1 repositories.RouteRecord
		result2 error
	}
	fetchOrCreateRouteReturnsOnCall map[int]struct {
		result1 repositories.RouteRecord
		result2 error
	}
	FetchRoutesForAppStub        func(context.Context, authorization.Info, string, string) ([]repositories.RouteRecord, error)
	fetchRoutesForAppMutex       sync.RWMutex
	fetchRoutesForAppArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}
	fetchRoutesForAppReturns struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	fetchRoutesForAppReturnsOnCall map[int]struct {
		result1 []repositories.RouteRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFRouteRepository) AddDestinationsToRoute(arg1 context.Context, arg2 authorization.Info, arg3 repositories.AddDestinationsToRouteMessage) (repositories.RouteRecord, error) {
	fake.addDestinationsToRouteMutex.Lock()
	ret, specificReturn := fake.addDestinationsToRouteReturnsOnCall[len(fake.addDestinationsToRouteArgsForCall)]
	fake.addDestinationsToRouteArgsForCall = append(fake.addDestinationsToRouteArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.AddDestinationsToRouteMessage
	}{arg1, arg2, arg3})
	stub := fake.AddDestinationsToRouteStub
	fakeReturns := fake.addDestinationsToRouteReturns
	fake.recordInvocation("AddDestinationsToRoute", []interface{}{arg1, arg2, arg3})
	fake.addDestinationsToRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) AddDestinationsToRouteCallCount() int {
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	return len(fake.addDestinationsToRouteArgsForCall)
}

func (fake *CFRouteRepository) AddDestinationsToRouteCalls(stub func(context.Context, authorization.Info, repositories.AddDestinationsToRouteMessage) (repositories.RouteRecord, error)) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = stub
}

func (fake *CFRouteRepository) AddDestinationsToRouteArgsForCall(i int) (context.Context, authorization.Info, repositories.AddDestinationsToRouteMessage) {
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	argsForCall := fake.addDestinationsToRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFRouteRepository) AddDestinationsToRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = nil
	fake.addDestinationsToRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) AddDestinationsToRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.addDestinationsToRouteMutex.Lock()
	defer fake.addDestinationsToRouteMutex.Unlock()
	fake.AddDestinationsToRouteStub = nil
	if fake.addDestinationsToRouteReturnsOnCall == nil {
		fake.addDestinationsToRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.addDestinationsToRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchOrCreateRoute(arg1 context.Context, arg2 authorization.Info, arg3 repositories.CreateRouteMessage) (repositories.RouteRecord, error) {
	fake.fetchOrCreateRouteMutex.Lock()
	ret, specificReturn := fake.fetchOrCreateRouteReturnsOnCall[len(fake.fetchOrCreateRouteArgsForCall)]
	fake.fetchOrCreateRouteArgsForCall = append(fake.fetchOrCreateRouteArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateRouteMessage
	}{arg1, arg2, arg3})
	stub := fake.FetchOrCreateRouteStub
	fakeReturns := fake.fetchOrCreateRouteReturns
	fake.recordInvocation("FetchOrCreateRoute", []interface{}{arg1, arg2, arg3})
	fake.fetchOrCreateRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchOrCreateRouteCallCount() int {
	fake.fetchOrCreateRouteMutex.RLock()
	defer fake.fetchOrCreateRouteMutex.RUnlock()
	return len(fake.fetchOrCreateRouteArgsForCall)
}

func (fake *CFRouteRepository) FetchOrCreateRouteCalls(stub func(context.Context, authorization.Info, repositories.CreateRouteMessage) (repositories.RouteRecord, error)) {
	fake.fetchOrCreateRouteMutex.Lock()
	defer fake.fetchOrCreateRouteMutex.Unlock()
	fake.FetchOrCreateRouteStub = stub
}

func (fake *CFRouteRepository) FetchOrCreateRouteArgsForCall(i int) (context.Context, authorization.Info, repositories.CreateRouteMessage) {
	fake.fetchOrCreateRouteMutex.RLock()
	defer fake.fetchOrCreateRouteMutex.RUnlock()
	argsForCall := fake.fetchOrCreateRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFRouteRepository) FetchOrCreateRouteReturns(result1 repositories.RouteRecord, result2 error) {
	fake.fetchOrCreateRouteMutex.Lock()
	defer fake.fetchOrCreateRouteMutex.Unlock()
	fake.FetchOrCreateRouteStub = nil
	fake.fetchOrCreateRouteReturns = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchOrCreateRouteReturnsOnCall(i int, result1 repositories.RouteRecord, result2 error) {
	fake.fetchOrCreateRouteMutex.Lock()
	defer fake.fetchOrCreateRouteMutex.Unlock()
	fake.FetchOrCreateRouteStub = nil
	if fake.fetchOrCreateRouteReturnsOnCall == nil {
		fake.fetchOrCreateRouteReturnsOnCall = make(map[int]struct {
			result1 repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchOrCreateRouteReturnsOnCall[i] = struct {
		result1 repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRoutesForApp(arg1 context.Context, arg2 authorization.Info, arg3 string, arg4 string) ([]repositories.RouteRecord, error) {
	fake.fetchRoutesForAppMutex.Lock()
	ret, specificReturn := fake.fetchRoutesForAppReturnsOnCall[len(fake.fetchRoutesForAppArgsForCall)]
	fake.fetchRoutesForAppArgsForCall = append(fake.fetchRoutesForAppArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.FetchRoutesForAppStub
	fakeReturns := fake.fetchRoutesForAppReturns
	fake.recordInvocation("FetchRoutesForApp", []interface{}{arg1, arg2, arg3, arg4})
	fake.fetchRoutesForAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFRouteRepository) FetchRoutesForAppCallCount() int {
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	return len(fake.fetchRoutesForAppArgsForCall)
}

func (fake *CFRouteRepository) FetchRoutesForAppCalls(stub func(context.Context, authorization.Info, string, string) ([]repositories.RouteRecord, error)) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = stub
}

func (fake *CFRouteRepository) FetchRoutesForAppArgsForCall(i int) (context.Context, authorization.Info, string, string) {
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	argsForCall := fake.fetchRoutesForAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *CFRouteRepository) FetchRoutesForAppReturns(result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = nil
	fake.fetchRoutesForAppReturns = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) FetchRoutesForAppReturnsOnCall(i int, result1 []repositories.RouteRecord, result2 error) {
	fake.fetchRoutesForAppMutex.Lock()
	defer fake.fetchRoutesForAppMutex.Unlock()
	fake.FetchRoutesForAppStub = nil
	if fake.fetchRoutesForAppReturnsOnCall == nil {
		fake.fetchRoutesForAppReturnsOnCall = make(map[int]struct {
			result1 []repositories.RouteRecord
			result2 error
		})
	}
	fake.fetchRoutesForAppReturnsOnCall[i] = struct {
		result1 []repositories.RouteRecord
		result2 error
	}{result1, result2}
}

func (fake *CFRouteRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDestinationsToRouteMutex.RLock()
	defer fake.addDestinationsToRouteMutex.RUnlock()
	fake.fetchOrCreateRouteMutex.RLock()
	defer fake.fetchOrCreateRouteMutex.RUnlock()
	fake.fetchRoutesForAppMutex.RLock()
	defer fake.fetchRoutesForAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFRouteRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.CFRouteRepository = new(CFRouteRepository)
