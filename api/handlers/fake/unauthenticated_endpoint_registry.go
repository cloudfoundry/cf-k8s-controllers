// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/korifi/api/handlers"
)

type UnauthenticatedEndpointRegistry struct {
	IsUnauthenticatedEndpointStub        func(string) bool
	isUnauthenticatedEndpointMutex       sync.RWMutex
	isUnauthenticatedEndpointArgsForCall []struct {
		arg1 string
	}
	isUnauthenticatedEndpointReturns struct {
		result1 bool
	}
	isUnauthenticatedEndpointReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpoint(arg1 string) bool {
	fake.isUnauthenticatedEndpointMutex.Lock()
	ret, specificReturn := fake.isUnauthenticatedEndpointReturnsOnCall[len(fake.isUnauthenticatedEndpointArgsForCall)]
	fake.isUnauthenticatedEndpointArgsForCall = append(fake.isUnauthenticatedEndpointArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsUnauthenticatedEndpointStub
	fakeReturns := fake.isUnauthenticatedEndpointReturns
	fake.recordInvocation("IsUnauthenticatedEndpoint", []interface{}{arg1})
	fake.isUnauthenticatedEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpointCallCount() int {
	fake.isUnauthenticatedEndpointMutex.RLock()
	defer fake.isUnauthenticatedEndpointMutex.RUnlock()
	return len(fake.isUnauthenticatedEndpointArgsForCall)
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpointCalls(stub func(string) bool) {
	fake.isUnauthenticatedEndpointMutex.Lock()
	defer fake.isUnauthenticatedEndpointMutex.Unlock()
	fake.IsUnauthenticatedEndpointStub = stub
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpointArgsForCall(i int) string {
	fake.isUnauthenticatedEndpointMutex.RLock()
	defer fake.isUnauthenticatedEndpointMutex.RUnlock()
	argsForCall := fake.isUnauthenticatedEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpointReturns(result1 bool) {
	fake.isUnauthenticatedEndpointMutex.Lock()
	defer fake.isUnauthenticatedEndpointMutex.Unlock()
	fake.IsUnauthenticatedEndpointStub = nil
	fake.isUnauthenticatedEndpointReturns = struct {
		result1 bool
	}{result1}
}

func (fake *UnauthenticatedEndpointRegistry) IsUnauthenticatedEndpointReturnsOnCall(i int, result1 bool) {
	fake.isUnauthenticatedEndpointMutex.Lock()
	defer fake.isUnauthenticatedEndpointMutex.Unlock()
	fake.IsUnauthenticatedEndpointStub = nil
	if fake.isUnauthenticatedEndpointReturnsOnCall == nil {
		fake.isUnauthenticatedEndpointReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isUnauthenticatedEndpointReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *UnauthenticatedEndpointRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isUnauthenticatedEndpointMutex.RLock()
	defer fake.isUnauthenticatedEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UnauthenticatedEndpointRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.UnauthenticatedEndpointRegistry = new(UnauthenticatedEndpointRegistry)
