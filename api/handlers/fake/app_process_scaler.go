// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/handlers"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type AppProcessScaler struct {
	ScaleAppProcessStub        func(context.Context, authorization.Info, string, string, repositories.ProcessScaleValues) (repositories.ProcessRecord, error)
	scaleAppProcessMutex       sync.RWMutex
	scaleAppProcessArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
		arg5 repositories.ProcessScaleValues
	}
	scaleAppProcessReturns struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	scaleAppProcessReturnsOnCall map[int]struct {
		result1 repositories.ProcessRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AppProcessScaler) ScaleAppProcess(arg1 context.Context, arg2 authorization.Info, arg3 string, arg4 string, arg5 repositories.ProcessScaleValues) (repositories.ProcessRecord, error) {
	fake.scaleAppProcessMutex.Lock()
	ret, specificReturn := fake.scaleAppProcessReturnsOnCall[len(fake.scaleAppProcessArgsForCall)]
	fake.scaleAppProcessArgsForCall = append(fake.scaleAppProcessArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
		arg5 repositories.ProcessScaleValues
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ScaleAppProcessStub
	fakeReturns := fake.scaleAppProcessReturns
	fake.recordInvocation("ScaleAppProcess", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.scaleAppProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AppProcessScaler) ScaleAppProcessCallCount() int {
	fake.scaleAppProcessMutex.RLock()
	defer fake.scaleAppProcessMutex.RUnlock()
	return len(fake.scaleAppProcessArgsForCall)
}

func (fake *AppProcessScaler) ScaleAppProcessCalls(stub func(context.Context, authorization.Info, string, string, repositories.ProcessScaleValues) (repositories.ProcessRecord, error)) {
	fake.scaleAppProcessMutex.Lock()
	defer fake.scaleAppProcessMutex.Unlock()
	fake.ScaleAppProcessStub = stub
}

func (fake *AppProcessScaler) ScaleAppProcessArgsForCall(i int) (context.Context, authorization.Info, string, string, repositories.ProcessScaleValues) {
	fake.scaleAppProcessMutex.RLock()
	defer fake.scaleAppProcessMutex.RUnlock()
	argsForCall := fake.scaleAppProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *AppProcessScaler) ScaleAppProcessReturns(result1 repositories.ProcessRecord, result2 error) {
	fake.scaleAppProcessMutex.Lock()
	defer fake.scaleAppProcessMutex.Unlock()
	fake.ScaleAppProcessStub = nil
	fake.scaleAppProcessReturns = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *AppProcessScaler) ScaleAppProcessReturnsOnCall(i int, result1 repositories.ProcessRecord, result2 error) {
	fake.scaleAppProcessMutex.Lock()
	defer fake.scaleAppProcessMutex.Unlock()
	fake.ScaleAppProcessStub = nil
	if fake.scaleAppProcessReturnsOnCall == nil {
		fake.scaleAppProcessReturnsOnCall = make(map[int]struct {
			result1 repositories.ProcessRecord
			result2 error
		})
	}
	fake.scaleAppProcessReturnsOnCall[i] = struct {
		result1 repositories.ProcessRecord
		result2 error
	}{result1, result2}
}

func (fake *AppProcessScaler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.scaleAppProcessMutex.RLock()
	defer fake.scaleAppProcessMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AppProcessScaler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.AppProcessScaler = new(AppProcessScaler)
