// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/api/apis"
	"code.cloudfoundry.org/cf-k8s-controllers/api/authorization"
	"code.cloudfoundry.org/cf-k8s-controllers/api/repositories"
)

type CFDomainRepository struct {
	FetchDomainStub        func(context.Context, authorization.Info, string) (repositories.DomainRecord, error)
	fetchDomainMutex       sync.RWMutex
	fetchDomainArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}
	fetchDomainReturns struct {
		result1 repositories.DomainRecord
		result2 error
	}
	fetchDomainReturnsOnCall map[int]struct {
		result1 repositories.DomainRecord
		result2 error
	}
	FetchDomainListStub        func(context.Context, authorization.Info, repositories.DomainListMessage) ([]repositories.DomainRecord, error)
	fetchDomainListMutex       sync.RWMutex
	fetchDomainListArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.DomainListMessage
	}
	fetchDomainListReturns struct {
		result1 []repositories.DomainRecord
		result2 error
	}
	fetchDomainListReturnsOnCall map[int]struct {
		result1 []repositories.DomainRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFDomainRepository) FetchDomain(arg1 context.Context, arg2 authorization.Info, arg3 string) (repositories.DomainRecord, error) {
	fake.fetchDomainMutex.Lock()
	ret, specificReturn := fake.fetchDomainReturnsOnCall[len(fake.fetchDomainArgsForCall)]
	fake.fetchDomainArgsForCall = append(fake.fetchDomainArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FetchDomainStub
	fakeReturns := fake.fetchDomainReturns
	fake.recordInvocation("FetchDomain", []interface{}{arg1, arg2, arg3})
	fake.fetchDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFDomainRepository) FetchDomainCallCount() int {
	fake.fetchDomainMutex.RLock()
	defer fake.fetchDomainMutex.RUnlock()
	return len(fake.fetchDomainArgsForCall)
}

func (fake *CFDomainRepository) FetchDomainCalls(stub func(context.Context, authorization.Info, string) (repositories.DomainRecord, error)) {
	fake.fetchDomainMutex.Lock()
	defer fake.fetchDomainMutex.Unlock()
	fake.FetchDomainStub = stub
}

func (fake *CFDomainRepository) FetchDomainArgsForCall(i int) (context.Context, authorization.Info, string) {
	fake.fetchDomainMutex.RLock()
	defer fake.fetchDomainMutex.RUnlock()
	argsForCall := fake.fetchDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFDomainRepository) FetchDomainReturns(result1 repositories.DomainRecord, result2 error) {
	fake.fetchDomainMutex.Lock()
	defer fake.fetchDomainMutex.Unlock()
	fake.FetchDomainStub = nil
	fake.fetchDomainReturns = struct {
		result1 repositories.DomainRecord
		result2 error
	}{result1, result2}
}

func (fake *CFDomainRepository) FetchDomainReturnsOnCall(i int, result1 repositories.DomainRecord, result2 error) {
	fake.fetchDomainMutex.Lock()
	defer fake.fetchDomainMutex.Unlock()
	fake.FetchDomainStub = nil
	if fake.fetchDomainReturnsOnCall == nil {
		fake.fetchDomainReturnsOnCall = make(map[int]struct {
			result1 repositories.DomainRecord
			result2 error
		})
	}
	fake.fetchDomainReturnsOnCall[i] = struct {
		result1 repositories.DomainRecord
		result2 error
	}{result1, result2}
}

func (fake *CFDomainRepository) FetchDomainList(arg1 context.Context, arg2 authorization.Info, arg3 repositories.DomainListMessage) ([]repositories.DomainRecord, error) {
	fake.fetchDomainListMutex.Lock()
	ret, specificReturn := fake.fetchDomainListReturnsOnCall[len(fake.fetchDomainListArgsForCall)]
	fake.fetchDomainListArgsForCall = append(fake.fetchDomainListArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.DomainListMessage
	}{arg1, arg2, arg3})
	stub := fake.FetchDomainListStub
	fakeReturns := fake.fetchDomainListReturns
	fake.recordInvocation("FetchDomainList", []interface{}{arg1, arg2, arg3})
	fake.fetchDomainListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFDomainRepository) FetchDomainListCallCount() int {
	fake.fetchDomainListMutex.RLock()
	defer fake.fetchDomainListMutex.RUnlock()
	return len(fake.fetchDomainListArgsForCall)
}

func (fake *CFDomainRepository) FetchDomainListCalls(stub func(context.Context, authorization.Info, repositories.DomainListMessage) ([]repositories.DomainRecord, error)) {
	fake.fetchDomainListMutex.Lock()
	defer fake.fetchDomainListMutex.Unlock()
	fake.FetchDomainListStub = stub
}

func (fake *CFDomainRepository) FetchDomainListArgsForCall(i int) (context.Context, authorization.Info, repositories.DomainListMessage) {
	fake.fetchDomainListMutex.RLock()
	defer fake.fetchDomainListMutex.RUnlock()
	argsForCall := fake.fetchDomainListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFDomainRepository) FetchDomainListReturns(result1 []repositories.DomainRecord, result2 error) {
	fake.fetchDomainListMutex.Lock()
	defer fake.fetchDomainListMutex.Unlock()
	fake.FetchDomainListStub = nil
	fake.fetchDomainListReturns = struct {
		result1 []repositories.DomainRecord
		result2 error
	}{result1, result2}
}

func (fake *CFDomainRepository) FetchDomainListReturnsOnCall(i int, result1 []repositories.DomainRecord, result2 error) {
	fake.fetchDomainListMutex.Lock()
	defer fake.fetchDomainListMutex.Unlock()
	fake.FetchDomainListStub = nil
	if fake.fetchDomainListReturnsOnCall == nil {
		fake.fetchDomainListReturnsOnCall = make(map[int]struct {
			result1 []repositories.DomainRecord
			result2 error
		})
	}
	fake.fetchDomainListReturnsOnCall[i] = struct {
		result1 []repositories.DomainRecord
		result2 error
	}{result1, result2}
}

func (fake *CFDomainRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchDomainMutex.RLock()
	defer fake.fetchDomainMutex.RUnlock()
	fake.fetchDomainListMutex.RLock()
	defer fake.fetchDomainListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFDomainRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFDomainRepository = new(CFDomainRepository)
