// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/api/apis"
	"code.cloudfoundry.org/cf-k8s-controllers/api/repositories"
)

type SpaceRepositoryProvider struct {
	SpaceRepoForRequestStub        func() (repositories.CFSpaceRepository, error)
	spaceRepoForRequestMutex       sync.RWMutex
	spaceRepoForRequestArgsForCall []struct {
	}
	spaceRepoForRequestReturns struct {
		result1 repositories.CFSpaceRepository
		result2 error
	}
	spaceRepoForRequestReturnsOnCall map[int]struct {
		result1 repositories.CFSpaceRepository
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SpaceRepositoryProvider) SpaceRepoForRequest() (repositories.CFSpaceRepository, error) {
	fake.spaceRepoForRequestMutex.Lock()
	ret, specificReturn := fake.spaceRepoForRequestReturnsOnCall[len(fake.spaceRepoForRequestArgsForCall)]
	fake.spaceRepoForRequestArgsForCall = append(fake.spaceRepoForRequestArgsForCall, struct {
	}{})
	stub := fake.SpaceRepoForRequestStub
	fakeReturns := fake.spaceRepoForRequestReturns
	fake.recordInvocation("SpaceRepoForRequest", []interface{}{})
	fake.spaceRepoForRequestMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SpaceRepositoryProvider) SpaceRepoForRequestCallCount() int {
	fake.spaceRepoForRequestMutex.RLock()
	defer fake.spaceRepoForRequestMutex.RUnlock()
	return len(fake.spaceRepoForRequestArgsForCall)
}

func (fake *SpaceRepositoryProvider) SpaceRepoForRequestCalls(stub func() (repositories.CFSpaceRepository, error)) {
	fake.spaceRepoForRequestMutex.Lock()
	defer fake.spaceRepoForRequestMutex.Unlock()
	fake.SpaceRepoForRequestStub = stub
}

func (fake *SpaceRepositoryProvider) SpaceRepoForRequestReturns(result1 repositories.CFSpaceRepository, result2 error) {
	fake.spaceRepoForRequestMutex.Lock()
	defer fake.spaceRepoForRequestMutex.Unlock()
	fake.SpaceRepoForRequestStub = nil
	fake.spaceRepoForRequestReturns = struct {
		result1 repositories.CFSpaceRepository
		result2 error
	}{result1, result2}
}

func (fake *SpaceRepositoryProvider) SpaceRepoForRequestReturnsOnCall(i int, result1 repositories.CFSpaceRepository, result2 error) {
	fake.spaceRepoForRequestMutex.Lock()
	defer fake.spaceRepoForRequestMutex.Unlock()
	fake.SpaceRepoForRequestStub = nil
	if fake.spaceRepoForRequestReturnsOnCall == nil {
		fake.spaceRepoForRequestReturnsOnCall = make(map[int]struct {
			result1 repositories.CFSpaceRepository
			result2 error
		})
	}
	fake.spaceRepoForRequestReturnsOnCall[i] = struct {
		result1 repositories.CFSpaceRepository
		result2 error
	}{result1, result2}
}

func (fake *SpaceRepositoryProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.spaceRepoForRequestMutex.RLock()
	defer fake.spaceRepoForRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SpaceRepositoryProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.SpaceRepositoryProvider = new(SpaceRepositoryProvider)
