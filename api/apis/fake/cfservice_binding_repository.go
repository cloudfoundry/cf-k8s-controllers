// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/api/apis"
	"code.cloudfoundry.org/cf-k8s-controllers/api/authorization"
	"code.cloudfoundry.org/cf-k8s-controllers/api/repositories"
)

type CFServiceBindingRepository struct {
	CreateServiceBindingStub        func(context.Context, authorization.Info, repositories.CreateServiceBindingMessage) (repositories.ServiceBindingRecord, error)
	createServiceBindingMutex       sync.RWMutex
	createServiceBindingArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateServiceBindingMessage
	}
	createServiceBindingReturns struct {
		result1 repositories.ServiceBindingRecord
		result2 error
	}
	createServiceBindingReturnsOnCall map[int]struct {
		result1 repositories.ServiceBindingRecord
		result2 error
	}
	ListServiceBindingsStub        func(context.Context, authorization.Info, repositories.ListServiceBindingsMessage) ([]repositories.ServiceBindingRecord, error)
	listServiceBindingsMutex       sync.RWMutex
	listServiceBindingsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListServiceBindingsMessage
	}
	listServiceBindingsReturns struct {
		result1 []repositories.ServiceBindingRecord
		result2 error
	}
	listServiceBindingsReturnsOnCall map[int]struct {
		result1 []repositories.ServiceBindingRecord
		result2 error
	}
	ServiceBindingExistsStub        func(context.Context, authorization.Info, string, string, string) (bool, error)
	serviceBindingExistsMutex       sync.RWMutex
	serviceBindingExistsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
		arg5 string
	}
	serviceBindingExistsReturns struct {
		result1 bool
		result2 error
	}
	serviceBindingExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFServiceBindingRepository) CreateServiceBinding(arg1 context.Context, arg2 authorization.Info, arg3 repositories.CreateServiceBindingMessage) (repositories.ServiceBindingRecord, error) {
	fake.createServiceBindingMutex.Lock()
	ret, specificReturn := fake.createServiceBindingReturnsOnCall[len(fake.createServiceBindingArgsForCall)]
	fake.createServiceBindingArgsForCall = append(fake.createServiceBindingArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.CreateServiceBindingMessage
	}{arg1, arg2, arg3})
	stub := fake.CreateServiceBindingStub
	fakeReturns := fake.createServiceBindingReturns
	fake.recordInvocation("CreateServiceBinding", []interface{}{arg1, arg2, arg3})
	fake.createServiceBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFServiceBindingRepository) CreateServiceBindingCallCount() int {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	return len(fake.createServiceBindingArgsForCall)
}

func (fake *CFServiceBindingRepository) CreateServiceBindingCalls(stub func(context.Context, authorization.Info, repositories.CreateServiceBindingMessage) (repositories.ServiceBindingRecord, error)) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = stub
}

func (fake *CFServiceBindingRepository) CreateServiceBindingArgsForCall(i int) (context.Context, authorization.Info, repositories.CreateServiceBindingMessage) {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	argsForCall := fake.createServiceBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFServiceBindingRepository) CreateServiceBindingReturns(result1 repositories.ServiceBindingRecord, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	fake.createServiceBindingReturns = struct {
		result1 repositories.ServiceBindingRecord
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) CreateServiceBindingReturnsOnCall(i int, result1 repositories.ServiceBindingRecord, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	if fake.createServiceBindingReturnsOnCall == nil {
		fake.createServiceBindingReturnsOnCall = make(map[int]struct {
			result1 repositories.ServiceBindingRecord
			result2 error
		})
	}
	fake.createServiceBindingReturnsOnCall[i] = struct {
		result1 repositories.ServiceBindingRecord
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) ListServiceBindings(arg1 context.Context, arg2 authorization.Info, arg3 repositories.ListServiceBindingsMessage) ([]repositories.ServiceBindingRecord, error) {
	fake.listServiceBindingsMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsReturnsOnCall[len(fake.listServiceBindingsArgsForCall)]
	fake.listServiceBindingsArgsForCall = append(fake.listServiceBindingsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.ListServiceBindingsMessage
	}{arg1, arg2, arg3})
	stub := fake.ListServiceBindingsStub
	fakeReturns := fake.listServiceBindingsReturns
	fake.recordInvocation("ListServiceBindings", []interface{}{arg1, arg2, arg3})
	fake.listServiceBindingsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFServiceBindingRepository) ListServiceBindingsCallCount() int {
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	return len(fake.listServiceBindingsArgsForCall)
}

func (fake *CFServiceBindingRepository) ListServiceBindingsCalls(stub func(context.Context, authorization.Info, repositories.ListServiceBindingsMessage) ([]repositories.ServiceBindingRecord, error)) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = stub
}

func (fake *CFServiceBindingRepository) ListServiceBindingsArgsForCall(i int) (context.Context, authorization.Info, repositories.ListServiceBindingsMessage) {
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	argsForCall := fake.listServiceBindingsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFServiceBindingRepository) ListServiceBindingsReturns(result1 []repositories.ServiceBindingRecord, result2 error) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = nil
	fake.listServiceBindingsReturns = struct {
		result1 []repositories.ServiceBindingRecord
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) ListServiceBindingsReturnsOnCall(i int, result1 []repositories.ServiceBindingRecord, result2 error) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = nil
	if fake.listServiceBindingsReturnsOnCall == nil {
		fake.listServiceBindingsReturnsOnCall = make(map[int]struct {
			result1 []repositories.ServiceBindingRecord
			result2 error
		})
	}
	fake.listServiceBindingsReturnsOnCall[i] = struct {
		result1 []repositories.ServiceBindingRecord
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) ServiceBindingExists(arg1 context.Context, arg2 authorization.Info, arg3 string, arg4 string, arg5 string) (bool, error) {
	fake.serviceBindingExistsMutex.Lock()
	ret, specificReturn := fake.serviceBindingExistsReturnsOnCall[len(fake.serviceBindingExistsArgsForCall)]
	fake.serviceBindingExistsArgsForCall = append(fake.serviceBindingExistsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ServiceBindingExistsStub
	fakeReturns := fake.serviceBindingExistsReturns
	fake.recordInvocation("ServiceBindingExists", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.serviceBindingExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CFServiceBindingRepository) ServiceBindingExistsCallCount() int {
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	return len(fake.serviceBindingExistsArgsForCall)
}

func (fake *CFServiceBindingRepository) ServiceBindingExistsCalls(stub func(context.Context, authorization.Info, string, string, string) (bool, error)) {
	fake.serviceBindingExistsMutex.Lock()
	defer fake.serviceBindingExistsMutex.Unlock()
	fake.ServiceBindingExistsStub = stub
}

func (fake *CFServiceBindingRepository) ServiceBindingExistsArgsForCall(i int) (context.Context, authorization.Info, string, string, string) {
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	argsForCall := fake.serviceBindingExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *CFServiceBindingRepository) ServiceBindingExistsReturns(result1 bool, result2 error) {
	fake.serviceBindingExistsMutex.Lock()
	defer fake.serviceBindingExistsMutex.Unlock()
	fake.ServiceBindingExistsStub = nil
	fake.serviceBindingExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) ServiceBindingExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.serviceBindingExistsMutex.Lock()
	defer fake.serviceBindingExistsMutex.Unlock()
	fake.ServiceBindingExistsStub = nil
	if fake.serviceBindingExistsReturnsOnCall == nil {
		fake.serviceBindingExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.serviceBindingExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *CFServiceBindingRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFServiceBindingRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apis.CFServiceBindingRepository = new(CFServiceBindingRepository)
