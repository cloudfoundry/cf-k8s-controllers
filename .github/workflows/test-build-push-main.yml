name: Test, Build, and Push API Image from main

on:
  push:
    branches:
    - main
    paths-ignore:
    - '**/*.md'
    - '.*/**'
    - '!.github/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  check-reference-api:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Check for reference YAML drift
      run: |
        make build-reference-api
        git diff --exit-code

  check-reference-controllers:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Check for reference YAML drift
      run: |
        make build-reference-controllers
        git diff --exit-code

  linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3

  controllers-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('controllers/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Run Controllers tests
      run: make test-controllers

    - name: Sanitize coverage report
      run: sed -i -E '/(fake|generated|vendor)/d' **/cover.out

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: controllers-coverage
        path: "**/cover.out"

  api-unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('api/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Run API unit tests
      run: make test-api-unit

    - name: Sanitize coverage report
      run: sed -i -E '/(fake|generated|vendor)/d' **/cover.out

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: api-unit-coverage
        path: "**/cover.out"

  api-integration-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('api/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Run API integration tests
      run: make test-api-integration

    - name: Sanitize coverage report
      run: sed -i -E '/(fake|generated|vendor)/d' **/cover.out

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: api-integration-coverage
        path: "**/cover.out"

  publish-code-coverage:
    needs:
    - controllers-tests
    - api-unit-tests
    - api-integration-tests

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Download controllers coverage
      uses: actions/download-artifact@v3
      with:
        name: controllers-coverage
        path: controllers-coverage

    - name: Download api unit coverage
      uses: actions/download-artifact@v3
      with:
        name: api-unit-coverage
        path: api-unit-coverage

    - name: Download api integration coverage
      uses: actions/download-artifact@v3
      with:
        name: api-integration-coverage
        path: api-integration-coverage

    - name: Generate and publish code coverage report
      uses: paambaati/codeclimate-action@v3.0.0
      env:
        CC_TEST_REPORTER_ID: eac10b59cb33cb6a2ae137260587e43e3e148c72f0d2a3b7cca35761cfe257ee
      with:
        coverageLocations: "**/cover.out:gocov"
        prefix: "code.cloudfoundry.org/cf-k8s-controllers"

  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./api/Dockerfile
          push: false
          tags: cloudfoundry/cf-k8s-api:${{ github.sha }},cloudfoundry/cf-k8s-api:latest
          cache-from: type=gha,scope=api-${{ matrix.buildx_version }}
          cache-to: type=gha,scope=api-${{ matrix.buildx_version }}
          outputs: type=docker,dest=/tmp/cf-k8s-api.image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cf-k8s-api.image
          path: /tmp/cf-k8s-api.image.tar

  build-controllers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./controllers/Dockerfile
          push: false
          tags: cloudfoundry/cf-k8s-controllers:${{ github.sha }},cloudfoundry/cf-k8s-controllers:latest
          cache-from: type=gha,scope=controllers-${{ matrix.buildx_version }}
          cache-to: type=gha,scope=controllers-${{ matrix.buildx_version }}
          outputs: type=docker,dest=/tmp/cf-k8s-controllers.image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cf-k8s-controllers.image
          path: /tmp/cf-k8s-controllers.image.tar

  e2e-tests:
    needs:
    - build-api
    - build-controllers
    - check-reference-api
    - check-reference-controllers

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        path: cf-k8s-controllers

    - uses: actions/checkout@v3
      with:
        repository: cloudfoundry-incubator/eirini-controller
        path: eirini-controller

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('cf-k8s-controllers/**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - uses: actions/setup-go@v3
      with:
        go-version: '^1.17'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Download API image
      uses: actions/download-artifact@v3
      with:
        name: cf-k8s-api.image
        path: /tmp

    - name: Load API image
      run: |
        docker load --input /tmp/cf-k8s-api.image.tar

    - name: Download controllers image
      uses: actions/download-artifact@v3
      with:
        name: cf-k8s-controllers.image
        path: /tmp

    - name: Load controllers image
      run: |
        docker load --input /tmp/cf-k8s-controllers.image.tar

    - name: Run e2e tests
      env:
        SKIP_DOCKER_BUILD: true
        IMG_API: cloudfoundry/cf-k8s-api:${{ github.sha }}
        IMG_CONTROLLERS: cloudfoundry/cf-k8s-controllers:${{ github.sha }}
      run: make test-e2e
      working-directory: ./cf-k8s-controllers

  push-latest-docker-images:
    needs:
    - api-unit-tests
    - api-integration-tests
    - controllers-tests
    - e2e-tests

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download API image
        uses: actions/download-artifact@v3
        with:
          name: cf-k8s-api.image
          path: /tmp

      - name: Load API image
        run: |
          docker load --input /tmp/cf-k8s-api.image.tar

      - name: Download controllers image
        uses: actions/download-artifact@v3
        with:
          name: cf-k8s-controllers.image
          path: /tmp

      - name: Load controllers image
        run: |
          docker load --input /tmp/cf-k8s-controllers.image.tar

      - name: Push API image
        run: |
          docker push cloudfoundry/cf-k8s-api:latest

      - name: Push Controller image
        run: |
          docker push cloudfoundry/cf-k8s-controllers:latest
