// Code generated by counterfeiter. DO NOT EDIT.
package webhooksfakes

import (
	"sync"

	"code.cloudfoundry.org/cf-k8s-controllers/webhooks"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

type FakeCFAppDecoder struct {
	DecodeStub        func(admission.Request, runtime.Object) error
	decodeMutex       sync.RWMutex
	decodeArgsForCall []struct {
		arg1 admission.Request
		arg2 runtime.Object
	}
	decodeReturns struct {
		result1 error
	}
	decodeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFAppDecoder) Decode(arg1 admission.Request, arg2 runtime.Object) error {
	fake.decodeMutex.Lock()
	ret, specificReturn := fake.decodeReturnsOnCall[len(fake.decodeArgsForCall)]
	fake.decodeArgsForCall = append(fake.decodeArgsForCall, struct {
		arg1 admission.Request
		arg2 runtime.Object
	}{arg1, arg2})
	stub := fake.DecodeStub
	fakeReturns := fake.decodeReturns
	fake.recordInvocation("Decode", []interface{}{arg1, arg2})
	fake.decodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFAppDecoder) DecodeCallCount() int {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	return len(fake.decodeArgsForCall)
}

func (fake *FakeCFAppDecoder) DecodeCalls(stub func(admission.Request, runtime.Object) error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = stub
}

func (fake *FakeCFAppDecoder) DecodeArgsForCall(i int) (admission.Request, runtime.Object) {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	argsForCall := fake.decodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFAppDecoder) DecodeReturns(result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	fake.decodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFAppDecoder) DecodeReturnsOnCall(i int, result1 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	if fake.decodeReturnsOnCall == nil {
		fake.decodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFAppDecoder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFAppDecoder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhooks.CFAppDecoder = new(FakeCFAppDecoder)
