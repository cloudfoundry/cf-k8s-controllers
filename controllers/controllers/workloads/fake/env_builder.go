// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/controllers/api/v1alpha1"
	"code.cloudfoundry.org/korifi/controllers/controllers/workloads"
)

type EnvBuilder struct {
	BuildEnvStub        func(context.Context, *v1alpha1.CFApp) (map[string]string, error)
	buildEnvMutex       sync.RWMutex
	buildEnvArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.CFApp
	}
	buildEnvReturns struct {
		result1 map[string]string
		result2 error
	}
	buildEnvReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EnvBuilder) BuildEnv(arg1 context.Context, arg2 *v1alpha1.CFApp) (map[string]string, error) {
	fake.buildEnvMutex.Lock()
	ret, specificReturn := fake.buildEnvReturnsOnCall[len(fake.buildEnvArgsForCall)]
	fake.buildEnvArgsForCall = append(fake.buildEnvArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.CFApp
	}{arg1, arg2})
	stub := fake.BuildEnvStub
	fakeReturns := fake.buildEnvReturns
	fake.recordInvocation("BuildEnv", []interface{}{arg1, arg2})
	fake.buildEnvMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EnvBuilder) BuildEnvCallCount() int {
	fake.buildEnvMutex.RLock()
	defer fake.buildEnvMutex.RUnlock()
	return len(fake.buildEnvArgsForCall)
}

func (fake *EnvBuilder) BuildEnvCalls(stub func(context.Context, *v1alpha1.CFApp) (map[string]string, error)) {
	fake.buildEnvMutex.Lock()
	defer fake.buildEnvMutex.Unlock()
	fake.BuildEnvStub = stub
}

func (fake *EnvBuilder) BuildEnvArgsForCall(i int) (context.Context, *v1alpha1.CFApp) {
	fake.buildEnvMutex.RLock()
	defer fake.buildEnvMutex.RUnlock()
	argsForCall := fake.buildEnvArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EnvBuilder) BuildEnvReturns(result1 map[string]string, result2 error) {
	fake.buildEnvMutex.Lock()
	defer fake.buildEnvMutex.Unlock()
	fake.BuildEnvStub = nil
	fake.buildEnvReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *EnvBuilder) BuildEnvReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.buildEnvMutex.Lock()
	defer fake.buildEnvMutex.Unlock()
	fake.BuildEnvStub = nil
	if fake.buildEnvReturnsOnCall == nil {
		fake.buildEnvReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.buildEnvReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *EnvBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildEnvMutex.RLock()
	defer fake.buildEnvMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EnvBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workloads.EnvBuilder = new(EnvBuilder)
