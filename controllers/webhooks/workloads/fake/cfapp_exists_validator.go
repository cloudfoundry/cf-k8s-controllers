// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/controllers/webhooks"
	"code.cloudfoundry.org/korifi/controllers/webhooks/workloads"
)

type CFAppExistsValidator struct {
	EnsureCFAppStub        func(context.Context, string, string) *webhooks.ValidationError
	ensureCFAppMutex       sync.RWMutex
	ensureCFAppArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	ensureCFAppReturns struct {
		result1 *webhooks.ValidationError
	}
	ensureCFAppReturnsOnCall map[int]struct {
		result1 *webhooks.ValidationError
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFAppExistsValidator) EnsureCFApp(arg1 context.Context, arg2 string, arg3 string) *webhooks.ValidationError {
	fake.ensureCFAppMutex.Lock()
	ret, specificReturn := fake.ensureCFAppReturnsOnCall[len(fake.ensureCFAppArgsForCall)]
	fake.ensureCFAppArgsForCall = append(fake.ensureCFAppArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.EnsureCFAppStub
	fakeReturns := fake.ensureCFAppReturns
	fake.recordInvocation("EnsureCFApp", []interface{}{arg1, arg2, arg3})
	fake.ensureCFAppMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CFAppExistsValidator) EnsureCFAppCallCount() int {
	fake.ensureCFAppMutex.RLock()
	defer fake.ensureCFAppMutex.RUnlock()
	return len(fake.ensureCFAppArgsForCall)
}

func (fake *CFAppExistsValidator) EnsureCFAppCalls(stub func(context.Context, string, string) *webhooks.ValidationError) {
	fake.ensureCFAppMutex.Lock()
	defer fake.ensureCFAppMutex.Unlock()
	fake.EnsureCFAppStub = stub
}

func (fake *CFAppExistsValidator) EnsureCFAppArgsForCall(i int) (context.Context, string, string) {
	fake.ensureCFAppMutex.RLock()
	defer fake.ensureCFAppMutex.RUnlock()
	argsForCall := fake.ensureCFAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CFAppExistsValidator) EnsureCFAppReturns(result1 *webhooks.ValidationError) {
	fake.ensureCFAppMutex.Lock()
	defer fake.ensureCFAppMutex.Unlock()
	fake.EnsureCFAppStub = nil
	fake.ensureCFAppReturns = struct {
		result1 *webhooks.ValidationError
	}{result1}
}

func (fake *CFAppExistsValidator) EnsureCFAppReturnsOnCall(i int, result1 *webhooks.ValidationError) {
	fake.ensureCFAppMutex.Lock()
	defer fake.ensureCFAppMutex.Unlock()
	fake.EnsureCFAppStub = nil
	if fake.ensureCFAppReturnsOnCall == nil {
		fake.ensureCFAppReturnsOnCall = make(map[int]struct {
			result1 *webhooks.ValidationError
		})
	}
	fake.ensureCFAppReturnsOnCall[i] = struct {
		result1 *webhooks.ValidationError
	}{result1}
}

func (fake *CFAppExistsValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ensureCFAppMutex.RLock()
	defer fake.ensureCFAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFAppExistsValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ workloads.CFAppExistsValidator = new(CFAppExistsValidator)
